name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_gen_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for proper coverage tracking

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            **/requirements.txt
            **/setup.cfg

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage-badge

      - name: Check dependency vulnerabilities
        run: |
          pip install safety
          safety check

      - name: Run linting and type checking
        run: |
          flake8 .
          mypy .
          black . --check

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_gen_db
          MONGODB_URL: mongodb://localhost:27017/test_gen_db
          SECRET_KEY: test-key
          DEBUG: True
          ENVIRONMENT: testing
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html --cov-fail-under=90 --cov-branch
          coverage-badge -o coverage-badge.svg -f

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage-report
          path: |
            coverage_html/
            coverage.xml
            coverage-badge.svg
          retention-days: 14

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-python
          fail_ci_if_error: true

  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm install -g codecov

      - name: Check for security vulnerabilities
        working-directory: ./frontend
        run: npm audit

      - name: Run linting and formatting checks
        working-directory: ./frontend
        run: |
          npm run lint
          npm run prettier:check
          npm run type-check

      - name: Run tests with coverage
        working-directory: ./frontend
        run: |
          npm test -- --coverage --watchAll=false --coverageReporters="text" --coverageReporters="lcov" --coverageThreshold='{"global":{"branches":90,"functions":90,"lines":90,"statements":90}}'

      - name: Archive frontend coverage results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage-report
          path: |
            frontend/coverage/
            frontend/coverage/lcov.info
          retention-days: 14

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-typescript
          fail_ci_if_error: true

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  deploy:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Generate combined coverage report
        run: |
          echo "## Coverage Report" > coverage-report.md
          echo "### Backend Coverage" >> coverage-report.md
          echo "![Backend Coverage](./backend-coverage-report/coverage-badge.svg)" >> coverage-report.md
          echo "### Frontend Coverage" >> coverage-report.md
          echo "Coverage information available in artifacts" >> coverage-report.md

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          files: |
            coverage-report.md
            backend-coverage-report/coverage-badge.svg
          name: Release ${{ github.sha }}
          body_path: coverage-report.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
